// Generated by CoffeeScript 1.6.3
var config, debounce, lumber, styles, times, util;

util = require("util");

styles = require("./styles");

lumber = {};

config = {
  log: true,
  nice: true,
  debounce: true,
  h1: true,
  h2: true,
  h3: true,
  error: true,
  "break": true,
  time: true,
  colours: true,
  inspect: true
};

debounce = function(func, threshold, execAsap) {
  var debounced, timeout;
  if (threshold == null) {
    threshold = 400;
  }
  if (execAsap == null) {
    execAsap = false;
  }
  timeout = void 0;
  return debounced = function() {
    var args, delayed, obj;
    delayed = function() {
      if (!execAsap) {
        func.apply(obj, args);
      }
      return timeout = null;
    };
    obj = this;
    args = arguments_;
    if (timeout) {
      clearTimeout(timeout);
    } else {
      if (execAsap) {
        func.apply(obj, args);
      }
    }
    return timeout = setTimeout(delayed, threshold || 100);
  };
};

lumber.config = function(obj) {
  var k, v, _results;
  if (obj == null) {
    obj = {};
  }
  _results = [];
  for (k in obj) {
    v = obj[k];
    _results.push(config[k] = v);
  }
  return _results;
};

lumber.hide = function(arr) {
  return arr.forEach(function(a) {
    return config[a] = false;
  });
};

lumber.show = function(arr) {
  var k, v;
  for (k in config) {
    v = config[k];
    config[k] = false;
  }
  return arr.forEach(function(a) {
    return config[a] = true;
  });
};

lumber.log = function(msg) {
  if (config.log) {
    return console.log(msg);
  }
};

lumber.indent = function(msg) {
  if (config.indent) {
    return console.log("    " + msg);
  }
};

lumber.debounce = function(msg, t) {
  if (msg == null) {
    msg = "";
  }
  if (t == null) {
    t = 400;
  }
  if (config.debounce) {
    return debounce((function() {
      return lumber.log(msg);
    }), t, false);
  }
};

lumber.nice = function(msg) {
  if (config.nice) {
    return lumber.log(JSON.stringify(nice, null, 2));
  }
};

lumber.inspect = function(data, depth) {
  var color;
  if (data == null) {
    data = [];
  }
  if (depth == null) {
    depth = 2;
  }
  if (config.inspect) {
    color = config.colours;
    lumber.log("");
    lumber.log(util.inspect(data, false, depth, color));
    return lumber.log("");
  }
};

lumber.h1 = function(msg) {
  if (config.h1) {
    lumber.log(" ");
    lumber.green("===================");
    lumber.green("    " + msg + "    ");
    lumber.green("===================");
    return lumber.log(" ");
  }
};

lumber.h2 = function(msg) {
  if (config.h2) {
    lumber.yellow(" ");
    lumber.yellow("==" + msg + "==  ");
    return lumber.yellow(" ");
  }
};

lumber.h3 = function(msg) {
  if (config.h2) {
    return lumber.yellow("--" + msg + "--");
  }
};

lumber.h4 = function(msg) {
  if (config.h2) {
    console.log("");
    lumber.yellow("--" + msg + "--");
    return console.log("");
  }
};

lumber["break"] = function(msg) {
  if (config["break"]) {
    lumber.log(" ");
    lumber.yellow(" ~~~ ");
    return lumber.log(" ");
  }
};

lumber.error = function(msg) {
  if (config.error) {
    lumber.red("@@@@");
    lumber.red("  " + msg);
    return lumber.red("@@@@");
  }
};

lumber.red = function(msg) {
  var colour;
  colour = styles.red;
  if (config.colours) {
    return lumber.log([colour[0], msg, colour[1]].join(""));
  } else {
    return lumber.log(msg);
  }
};

lumber.blue = function(msg) {
  var colour;
  colour = styles.blue;
  if (config.colours) {
    return lumber.log([colour[0], msg, colour[1]].join(""));
  } else {
    return lumber.log(msg);
  }
};

lumber.green = function(msg) {
  var colour;
  colour = styles.green;
  if (config.colours) {
    return lumber.log([colour[0], msg, colour[1]].join(""));
  } else {
    return lumber.log(msg);
  }
};

lumber.yellow = function(msg) {
  var colour;
  colour = styles.yellow;
  if (config.colours) {
    return lumber.log([colour[0], msg, colour[1]].join(""));
  } else {
    return lumber.log(msg);
  }
};

times = {};

lumber.timer = function(time) {
  if (time == null) {
    time = " ";
  }
  return times[time] = new Date();
};

lumber.since = function(time) {
  var t;
  if (time == null) {
    time = " ";
  }
  if (config.time) {
    t = 0;
    if (times[time]) {
      t = new Date() - times[time];
      return lumber.log(["    ", styles.blue[0], "" + time + ": ", t, "ms", styles.blue[1]].join(""));
    }
  }
};

module.exports = lumber;
